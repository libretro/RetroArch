HAVE_STATIC_DUMMY ?= 0
ifeq ($(TARGET),)
ifeq ($(LIBRETRO),)
TARGET := retroarch.js
LIBRETRO = dummy
else
TARGET := $(LIBRETRO)_libretro.js
endif
endif
TARGET_BASE := $(subst .js,,$(TARGET))

OS = Emscripten
OBJ :=
DEFINES := -DRARCH_INTERNAL -DHAVE_MAIN -DEMSCRIPTEN -DNO_CANVAS_RESIZE
DEFINES += -DHAVE_FILTERS_BUILTIN -DHAVE_ONLINE_UPDATER -DHAVE_UPDATE_ASSETS -DHAVE_UPDATE_CORE_INFO

HAVE_PATCH = 1
HAVE_DSP_FILTER = 1
HAVE_VIDEO_FILTER = 1
HAVE_OVERLAY = 1
HAVE_NETWORKING ?= 1
HAVE_LIBRETRODB = 1
HAVE_COMPRESSION = 1
HAVE_UPDATE_ASSETS = 1
HAVE_ONLINE_UPDATER = 1
HAVE_GLSL = 1
HAVE_SCREENSHOTS = 1
HAVE_REWIND = 1
HAVE_AUDIOMIXER = 1
HAVE_CC_RESAMPLER = 1
HAVE_EGL ?= 0
HAVE_OPENGLES = 1
HAVE_RJPEG = 0
HAVE_RPNG = 1
HAVE_EMSCRIPTEN = 1
HAVE_MENU ?= 1
HAVE_GFX_WIDGETS = 1
HAVE_RGUI = 1
HAVE_SDL = 0
HAVE_SDL2 = 0
HAVE_ZLIB = 1
HAVE_SHADERPIPELINE = 1
HAVE_STATIC_VIDEO_FILTERS = 1
HAVE_STATIC_AUDIO_FILTERS = 1
HAVE_STB_FONT = 1
HAVE_CONFIGFILE = 1
HAVE_COMMAND = 1
HAVE_STDIN_CMD ?= 1
HAVE_CHEATS = 1
HAVE_IBXM = 1
HAVE_CORE_INFO_CACHE = 1
HAVE_7ZIP = 1
HAVE_BSV_MOVIE = 1
HAVE_CHD ?= 0
HAVE_NETPLAYDISCOVERY ?= 0

HAVE_AL ?= 1

# enables pthreads, requires special headers on the web server:
# see https://web.dev/articles/coop-coep
HAVE_THREADS ?= 0

# requires HAVE_THREADS
HAVE_AUDIOWORKLET ?= 0

# WARNING -- READ BEFORE ENABLING
# The rwebaudio driver is known to have several audio bugs, such as
#  minor crackling, or the entire page freezing/crashing.
#  It works perfectly on chrome, but even firefox has really bad audio quality.
#  I should also note, the driver on iOS is completely broken (crashes the page).
#  You have been warned.
HAVE_RWEBAUDIO ?= 0

# whether the browser thread is allowed to block to wait for audio to play,
# may lead to the issues mentioned above.
# currently this variable is only used by audioworklet;
# rwebaudio will always busywait and openal will never busywait.
ALLOW_AUDIO_BUSYWAIT ?= 0

# minimal asyncify; better performance than full asyncify,
# but sleeping on the main thread is only possible in some places.
MIN_ASYNC ?= 0

# runs RetroArch on a pthread instead of the browser thread; requires HAVE_THREADS
PROXY_TO_PTHREAD ?= 0

# recommended FS when using HAVE_THREADS
HAVE_WASMFS ?= 0

# enables OPFS (origin private file system) and FETCHFS, requires PROXY_TO_PTHREAD
HAVE_EXTRA_WASMFS ?= 0

# enable javascript filesystem tracking, incompatible with HAVE_WASMFS
FS_DEBUG ?= 0

# help diagnose GL problems (can cause issues in normal operation)
GL_DEBUG ?= 0

# does nothing on its own, but automatically selected by some other options
WASM_WORKERS = 0

HAVE_OPENGLES ?= 1
HAVE_OPENGLES3 ?= 0

ASYNC ?= 0
LTO ?= 0
PTHREAD_POOL_SIZE ?= 4

STACK_SIZE ?= 4194304
INITIAL_HEAP ?= 134217728

# 4194304 ----- 4 MiB (Stack: recommended)
# 8388608 ----- 8 MiB
# 16777216 ---- 16 MiB
# 33554432 ---- 32 MiB
# 67108864 ---- 64 MiB
# 134217728 --- 128 MiB (Heap: recommended) (Stack: recommended for some cores [mupen64plus_next])
# 268435456 --- 256 MiB (Heap: recommended for some cores [mupen64plus_next])
# 536870912 --- 512 MiB (Heap: needed for some cores [mednafen_psx(_hw)])
# 1073741824 -- 1 GiB
# 1610612736 -- 1.5 GiB
# 2147483648 -- 2 GiB

OBJDIR := obj-emscripten

EXPORTED_FUNCTIONS = _main,_malloc,_free,_cmd_savefiles,_cmd_save_state,_cmd_load_state,_cmd_undo_save_state,_cmd_undo_load_state,_cmd_take_screenshot,\
_cmd_toggle_menu,_cmd_reload_config,_cmd_toggle_grab_mouse,_cmd_toggle_game_focus,_cmd_reset,_cmd_toggle_pause,_cmd_pause,_cmd_unpause,\
_cmd_set_volume,_cmd_set_shader,_cmd_cheat_set_code,_cmd_cheat_get_code,_cmd_cheat_toggle_index,_cmd_cheat_get_code_state,_cmd_cheat_realloc,\
_cmd_cheat_get_size,_cmd_cheat_apply_cheats,EmscriptenSendCommand,EmscriptenReceiveCommandReply

EXPORTS := callMain,FS,PATH,ERRNO_CODES,ENV,stringToNewUTF8,UTF8ToString,Browser,EmscriptenSendCommand,EmscriptenReceiveCommandReply

LIBS   := -s USE_ZLIB=1
CFLAGS := -s USE_ZLIB=1

ifeq ($(HAVE_EXTRA_WASMFS), 1)
   LIBS += -lfetchfs.js -lopfs.js
   DEFINES += -DHAVE_EXTRA_WASMFS
   override HAVE_WASMFS = 1
   ifeq ($(PROXY_TO_PTHREAD), 0)
      $(error ERROR: HAVE_EXTRA_WASMFS requires PROXY_TO_PTHREAD)
   endif
endif

ifeq ($(HAVE_WASMFS), 1)
   LIBS += -s WASMFS -s FORCE_FILESYSTEM=1
endif

# note: real PROXY_TO_PTHREAD is not used here; we do the pthread management ourselves
ifeq ($(PROXY_TO_PTHREAD), 1)
   LIBS += -s OFFSCREENCANVAS_SUPPORT
   DEFINES += -DPROXY_TO_PTHREAD -DEMSCRIPTEN_STACK_SIZE=$(STACK_SIZE)
   override HAVE_THREADS = 1
   override WASM_WORKERS = 1
   # use the default stack size for the browser thread; the RetroArch thread will be created with the specified stack size
   override STACK_SIZE = 4194304
else ifeq ($(HAVE_AL), 1)
   override ASYNC = 1
endif

ifeq ($(HAVE_SDL2), 1)
   LIBS += -s USE_SDL=2
   DEFINES += -DHAVE_SDL2
endif

LDFLAGS := -L. --no-heap-copy -s STACK_SIZE=$(STACK_SIZE) -s INITIAL_MEMORY=$(INITIAL_HEAP) \
           -s EXPORTED_RUNTIME_METHODS=$(EXPORTS) \
           -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_FUNCTIONS="$(EXPORTED_FUNCTIONS)" \
           -s MODULARIZE=1 -s EXPORT_ES6=1 -s EXPORT_NAME="libretro_$(subst -,_,$(LIBRETRO))" \
           -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=0 \
           -s ENVIRONMENT=web,worker \
           --extern-pre-js emscripten/pre.js \
           --js-library emscripten/library_rwebcam.js \
           --js-library emscripten/library_platform_emscripten.js

ifeq ($(HAVE_OPENGLES), 1)
   ifeq ($(HAVE_OPENGLES3), 1)
      LDFLAGS += -s FULL_ES3=1 -s MIN_WEBGL_VERSION=2 -s MAX_WEBGL_VERSION=2
   else
      LDFLAGS += -s FULL_ES2=1 -s MIN_WEBGL_VERSION=1 -s MAX_WEBGL_VERSION=2
   endif
endif

ifeq ($(GL_DEBUG), 1)
   LDFLAGS += -s GL_ASSERTIONS=1 -s GL_DEBUG=1
   DEFINES += -DHAVE_GL_DEBUG_ES=1
endif

ifeq ($(FS_DEBUG), 1)
   LDFLAGS += -s FS_DEBUG=1
endif

ifeq ($(HAVE_RWEBAUDIO), 1)
   LDFLAGS += --js-library emscripten/library_rwebaudio.js
   DEFINES += -DHAVE_RWEBAUDIO
endif

ifeq ($(HAVE_AUDIOWORKLET), 1)
   LDFLAGS += -s AUDIO_WORKLET=1
   DEFINES += -DHAVE_AUDIOWORKLET
   override WASM_WORKERS = 1
   ifeq ($(HAVE_THREADS), 0)
      $(error ERROR: AUDIOWORKLET requires HAVE_THREADS)
   endif
   ifeq ($(PROXY_TO_PTHREAD), 1)
   else ifeq ($(ASYNC), 1)
   else
      DEFINES += -DEMSCRIPTEN_AUDIO_EXTERNAL_BLOCK
      ifeq ($(MIN_ASYNC), 1)
         DEFINES += -DEMSCRIPTEN_AUDIO_ASYNC_BLOCK
      else
         DEFINES += -DEMSCRIPTEN_AUDIO_FAKE_BLOCK
      endif
      ifneq ($(ALLOW_AUDIO_BUSYWAIT), 1)
         DEFINES += -DEMSCRIPTEN_AUDIO_EXTERNAL_WRITE_BLOCK
      endif
   endif
endif

ifeq ($(ALLOW_AUDIO_BUSYWAIT), 1)
   DEFINES += -DEMSCRIPTEN_AUDIO_BUSYWAIT
endif

# explanation of some of these defines:
# EMSCRIPTEN_AUDIO_EXTERNAL_BLOCK: audio blocking occurs in the main loop instead of in the audio driver functions.
# EMSCRIPTEN_AUDIO_EXTERNAL_WRITE_BLOCK: along with above, enables external blocking in the write function.
# ALLOW_AUDIO_BUSYWAIT: write function will busywait. init function may still use an external block.
# EMSCRIPTEN_AUDIO_ASYNC_BLOCK: external block uses emscripten_sleep (requires MIN_ASYNC).
# EMSCRIPTEN_AUDIO_FAKE_BLOCK: external block uses main loop timing (doesn't require asyncify).
# when building with either PROXY_TO_PTHREAD or ASYNC (full asyncify), none of the above are required.

ifeq ($(HAVE_AL), 1)
   LDFLAGS += -lopenal
   DEFINES += -DHAVE_AL
endif

ifeq ($(HAVE_THREADS), 1)
   LDFLAGS += -pthread -s PTHREAD_POOL_SIZE=$(PTHREAD_POOL_SIZE)
   CFLAGS += -pthread -s SHARED_MEMORY
endif

ifeq ($(WASM_WORKERS), 1)
   LDFLAGS += -s WASM_WORKERS=2
endif

ifeq ($(ASYNC), 1)
   DEFINES += -DEMSCRIPTEN_ASYNCIFY -DEMSCRIPTEN_FULL_ASYNCIFY
   LDFLAGS += -s ASYNCIFY=1 -s ASYNCIFY_STACK_SIZE=8192
   ifeq ($(DEBUG), 1)
      #LDFLAGS += -s ASYNCIFY_DEBUG=1 # broken?
   endif
else ifeq ($(MIN_ASYNC), 1)
   DEFINES += -DEMSCRIPTEN_ASYNCIFY -DEMSCRIPTEN_MIN_ASYNCIFY
   LDFLAGS += -s ASYNCIFY=1 -s ASYNCIFY_STACK_SIZE=8192 -s ASYNCIFY_IGNORE_INDIRECT=1 -s ASYNCIFY_ADD='dynCall_*,emscripten_mainloop' -s ASYNCIFY_REMOVE='threaded_worker'
   ifeq ($(DEBUG), 1)
      LDFLAGS += -s ASYNCIFY_ADVISE #-s ASYNCIFY_DEBUG=1
   endif
endif

include Makefile.common

CFLAGS += $(DEF_FLAGS) -Ideps -Ideps/stb

libretro     =
libretro_new =

ifeq ($(HAVE_STATIC_DUMMY),1)
  DEFINES += -DHAVE_STATIC_DUMMY
else
  libretro     = libretro_emscripten.bc
  libretro_new = libretro_emscripten.a
endif

ifneq ($(V), 1)
   Q := @
endif

ifeq ($(DEBUG), 1)
   LDFLAGS += -O0 -g -gsource-map -s SAFE_HEAP=2 -s STACK_OVERFLOW_CHECK=2 -s ASSERTIONS=1
   # -O0 in cflags gives "too many locals" errors
   CFLAGS += -O1 -g -gsource-map
else
   LDFLAGS += -O3
   # WARNING: some optimizations can break some cores (ex: LTO breaks tyrquake)
   ifeq ($(LTO), 1)
      LDFLAGS += -flto
   endif
   CFLAGS += -O3
endif

CFLAGS += -Wall -I. -Ilibretro-common/include -Ideps/7zip -std=gnu99

RARCH_OBJ := $(addprefix $(OBJDIR)/,$(OBJ))

all: $(TARGET)

$(libretro_new): ;

mv_libretro:
	mv -f $(libretro) $(libretro_new) || true

# until emscripten adds something like WASM_WORKERS=2 but for audio worklets, DIY.
ifeq ($(HAVE_AUDIOWORKLET), 1)
$(TARGET): $(RARCH_OBJ) $(libretro_new) mv_libretro
	@$(if $(Q), $(shell echo echo "LD $@ \<obj\> $(libretro_new) $(LIBS) $(LDFLAGS)"),)
	$(Q)$(LD) -o $@ $(RARCH_OBJ) $(libretro_new) $(LIBS) $(LDFLAGS)
	$(Q)tr -d '\n' < "$(TARGET_BASE).aw.js" | sed -e "s/[\/&]/\\\\&/g" -e "s/'/\\\\\\\\&/g" > _audioworklet.js
	$(Q)sed -i.bak -e "s/\"$(TARGET_BASE)\.aw\.js\"/URL.createObjectURL(new Blob(['$$(cat _audioworklet.js)'],{type:'text\/javascript'}))/" -- "$@"
	$(Q)rm -f "$(TARGET_BASE).aw.js" _audioworklet.js "$@".bak
else
$(TARGET): $(RARCH_OBJ) $(libretro_new) mv_libretro
	@$(if $(Q), $(shell echo echo "LD $@ \<obj\> $(libretro_new) $(LIBS) $(LDFLAGS)"),)
	$(Q)$(LD) -o $@ $(RARCH_OBJ) $(libretro_new) $(LIBS) $(LDFLAGS)
endif

$(OBJDIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@$(if $(Q), $(shell echo echo CC $<),)
	$(Q)$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

$(OBJDIR)/%.o: %.cpp
	@mkdir -p $(dir $@)
	@$(if $(Q), $(shell echo echo CXX $<),)
	$(Q)$(CXX) $(CXXFLAGS) $(DEFINES) -c -o $@ $<

clean:
	rm -rf $(OBJDIR)
	rm -f $(TARGET)

.PHONY: all clean mv_libretro
